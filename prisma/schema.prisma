generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma" // change from src to app
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vendors {
  id            String  @id @default(uuid()) // UUID
  name          String  @db.VarChar(100)
  vendorName    String  @db.VarChar(255)
  mobile        String  @db.VarChar(256) // 256 because it's hashed. SHA256
  email         String? @db.VarChar(100)
  password      String? @db.VarChar(256) // 256 because it's hashed. SHA256
  address       String? @db.VarChar(255)
  googleMapLink String? @db.VarChar(255)
  domain        String? @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendorCampaign VendorCampaigns[]
  order          Orders[]
  payment        Payments[]
}

model VendorCampaigns {
  id                      String               @id @default(uuid()) // UUID
  vendorId                String
  templateCampaignId      String               @db.VarChar(150) // ID refers to YAML config, not a DB table // Input this Value from FE.
  templateCampaignDetails Json // (full json save)
  name                    String?              @db.VarChar(150)
  customerCount           Int                  @default(0)
  status                  VendorCampaignStatus @default(Draft)
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt

  vendor                 Vendors                    @relation(fields: [vendorId], references: [id])
  vendorCampaignProperty VendorCampaignProperties[]
  order                  Orders[]
  payment                Payments[]
}

enum VendorCampaignStatus {
  Draft
  Pending_Payment
  Active
  Completed
  Failed
}

model VendorCampaignProperties {
  id               String  @id @default(uuid()) // UUID
  vendorCampaignId String
  propertyKey      String? @db.VarChar(150)
  propertyValue    String? @db.VarChar(150)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendorCampaign VendorCampaigns @relation(fields: [vendorCampaignId], references: [id])
}

model Orders {
  id               String @id @default(uuid()) // UUID
  vendorId         String // FK to Vendor.id (UUID)
  vendorCampaignId String // FK to VendorCampaign.id (UUID)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderCount      Int @default(0)
  successMsgCount Int @default(0)
  failedMsgCount  Int @default(0)
  viewCount       Int @default(0)

  vendor         Vendors         @relation(fields: [vendorId], references: [id])
  vendorCampaign VendorCampaigns @relation(fields: [vendorCampaignId], references: [id])
  payment        Payments[]
}

model Payments {
  id               String @id @default(uuid()) // UUID
  orderId          String // FK to Orders.id (UUID)
  vendorId         String // FK to Vendor.id (UUID)
  vendorCampaignId String // FK to VendorCampaign.id (UUID)

  transactionId String        @unique @db.VarChar(500)
  gateway       String        @default("PayU") @db.VarChar(20)
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("INR") @db.VarChar(10)
  status        PaymentStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order          Orders          @relation(fields: [orderId], references: [id])
  vendor         Vendors         @relation(fields: [vendorId], references: [id])
  vendorCampaign VendorCampaigns @relation(fields: [vendorCampaignId], references: [id])
}

enum PaymentStatus {
  Pending
  Success
  Failed
}
